package elementarygraph.gui;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
import elementarygraph.algorithme.*;

//import com.mxgraph.*;
import com.mxgraph.model.*;
//import com.mxgraph.event.GraphSelectionEvent;
//import com.mxgraph.event.GraphSelectionListener;
import com.mxgraph.view.*;
import com.mxgraph.layout.*;
import com.mxgraph.swing.mxGraphComponent;

import java.util.Queue;
import java.awt.*;
import java.io.File;
import javax.swing.*;
import java.util.Vector;
/*
 * Main.java
 *
 * Created on 23 d√©c. 2009, 15:47:03
 */

/**
 * @author thuan
 */
public class MainMx extends javax.swing.JFrame {

  /**
   * Creates new form Main
   */
  public MainMx() {
    initComponents();
//    initTableProperty();
  }

  /**
   * This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    buttonGroup1 = new javax.swing.ButtonGroup();
    jPanel1 = new javax.swing.JPanel();
    jSplitPane1 = new javax.swing.JSplitPane();
    jSplitPane2 = new javax.swing.JSplitPane();
    jScrollPane2 = new javax.swing.JScrollPane();
    txtLog = new javax.swing.JTextArea();
    jPanel2 = new javax.swing.JPanel();
    rdbBFS = new javax.swing.JRadioButton();
    rdbDFS = new javax.swing.JRadioButton();
    jSplitPane3 = new javax.swing.JSplitPane();
    paneGraphDisplay = new javax.swing.JPanel();
    paneTreeDisplay = new javax.swing.JPanel();
    jMenuBar1 = new javax.swing.JMenuBar();
    cmdOpen = new javax.swing.JMenu();
    cmdReload = new javax.swing.JMenu();
    cmdNext = new javax.swing.JMenu();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    jPanel1.setLayout(new java.awt.BorderLayout());

    jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

    txtLog.setColumns(20);
    txtLog.setRows(20);
    txtLog.setText("Elementary Graph Simulation");
    jScrollPane2.setViewportView(txtLog);

    jSplitPane2.setTopComponent(jScrollPane2);

    buttonGroup1.add(rdbBFS);
    rdbBFS.setSelected(true);
    rdbBFS.setLabel("BFS");
    jPanel2.add(rdbBFS);
    rdbBFS.getAccessibleContext().setAccessibleName("rdbBFS");

    buttonGroup1.add(rdbDFS);
    rdbDFS.setLabel("DFS");
    rdbDFS.addChangeListener(new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
        rdbDFSStateChanged(evt);
      }
    });
    rdbDFS.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        rdbDFSItemStateChanged(evt);
      }
    });
    jPanel2.add(rdbDFS);
    rdbDFS.getAccessibleContext().setAccessibleName("rdbDFS");

    jSplitPane2.setRightComponent(jPanel2);

    jSplitPane1.setTopComponent(jSplitPane2);

    paneGraphDisplay.setPreferredSize(new java.awt.Dimension(500, 474));
    paneGraphDisplay.setLayout(new javax.swing.BoxLayout(paneGraphDisplay, javax.swing.BoxLayout.LINE_AXIS));
    jSplitPane3.setLeftComponent(paneGraphDisplay);

    paneTreeDisplay.setLayout(new javax.swing.BoxLayout(paneTreeDisplay, javax.swing.BoxLayout.LINE_AXIS));
    jSplitPane3.setRightComponent(paneTreeDisplay);

    jSplitPane1.setBottomComponent(jSplitPane3);

    jPanel1.add(jSplitPane1, java.awt.BorderLayout.CENTER);

    getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

    cmdOpen.setText("Open");
    cmdOpen.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mousePressed(java.awt.event.MouseEvent evt) {
        cmdOpenMousePressed(evt);
      }
    });
    jMenuBar1.add(cmdOpen);

    cmdReload.setText("Reload");
    cmdReload.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mousePressed(java.awt.event.MouseEvent evt) {
        cmdReloadMousePressed(evt);
      }
    });
    jMenuBar1.add(cmdReload);

    cmdNext.setText("Next");
    cmdNext.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mousePressed(java.awt.event.MouseEvent evt) {
        cmdNextMousePressed(evt);
      }
    });
    jMenuBar1.add(cmdNext);
    cmdNext.getAccessibleContext().setAccessibleName("cmdNext");

    setJMenuBar(jMenuBar1);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void displayLog(Vector<Node> edge) {
    txtLog.append("From: " + edge.get(0) + " to: " + edge.get(1) + "\n");


  }

    private void cmdNextMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdNextMousePressed
      Queue<Vector<Node>> outputTrace;
      if (STATE_SEARCH == STATE_SEARCH_BFS) {
        outputTrace = graphAlgo.traceBFS;
      } else {
        outputTrace = graphAlgo.traceDFS;
      }

      if (!outputTrace.isEmpty()) {
        Vector<Node> currentEdge = outputTrace.poll();
        if (currentEdge != null && currentEdge.size() == 2) {
          Node source = currentEdge.get(0);
          Node dest = currentEdge.get(1);
          graphDisplay.focusNode(dest);
          graphDisplay.focusEdge(currentEdge);
          treeDisplay.addEdge(currentEdge);
          displayLog(currentEdge);
        }
      } else {
        graphDisplay.recoverRecentEdge();
        graphDisplay.recoverRecentNode();
        treeDisplay.recoverRecentEdge();
      }
    }//GEN-LAST:event_cmdNextMousePressed

    private void cmdReloadMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdReloadMousePressed
      loadModel(new File(this.currentModel));
    }//GEN-LAST:event_cmdReloadMousePressed

    private void cmdOpenMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdOpenMousePressed
      // TODO add your handling code here:
      JFileChooser fileChooser = new JFileChooser();
      fileChooser.setCurrentDirectory(new File("."));
      fileChooser.setVisible(true);
      File file;
      if (fileChooser.showOpenDialog(this) == javax.swing.JFileChooser.APPROVE_OPTION) {
        file = fileChooser.getSelectedFile();
        // Call to function xu ly
        this.currentModel = file.getAbsolutePath();
        loadModel(file);
      }
    }//GEN-LAST:event_cmdOpenMousePressed
  public boolean STATE_SEARCH;
  public static boolean STATE_SEARCH_DFS = false;
  public static boolean STATE_SEARCH_BFS = true;

    private void rdbDFSStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rdbDFSStateChanged
      // TODO add your handling code here:
      //loadModel(new File(this.currentModel));
    }//GEN-LAST:event_rdbDFSStateChanged

    private void rdbDFSItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rdbDFSItemStateChanged
      // TODO add your handling code here:
      loadModel(new File(this.currentModel));

    }//GEN-LAST:event_rdbDFSItemStateChanged

  private Vector<Vector<Node>> loadGraph(File file) {
    Node node1 = new Node("a", 1);
    Node node2 = new Node("b", 2);
    Node node3 = new Node("c", 3);
    Node node4 = new Node("d", 4);
//        node3.setSlack(5);
    Vector<Vector<Node>> graph = new Vector<Vector<Node>>();

    Vector<Node> link1 = new Vector<Node>();
    link1.add(node1);
    link1.add(node2);
    graph.add(link1);

    Vector<Node> link2 = new Vector<Node>();
    link2.add(node2);
    link2.add(node3);
    link2.add(node4);
    graph.add(link2);

    Vector<Node> link3 = new Vector<Node>();
    link3.add(node4);
    link3.add(node3);
    graph.add(link3);

    return graph;
  }
  Graph graphAlgo = null;

  /**
   * load Model from file
   *
   * @param file
   */
  private void loadModel(File file) {
    try {
      //String path = new String("/home/thuan/sandbox/elementarygraph/src/src/elementarygraph/algorithme/Node.xml");
      //resultat = getInfos(path);
      graphAlgo = new Graph();

      Vector<Vector<Node>> gr = GraphDataReader.getInfos(file.getPath());//(Vector<Vector<Node>>)graphAlgo.data.clone();//oral.matrixNode;

//      if (gr.size() > 0) {
//        gr.remove(0);
//      }

      graphAlgo.data = (Vector<Vector<Node>>) gr.clone();
      graphAlgo.data.add(0, new Vector<Node>());
      graphAlgo.setSize(gr.size());

      // display model
      graphDisplay = new GraphDisplayMx();
      treeDisplay = new TreeDisplayMx();
      normaliseGraph(gr);
      graphDisplay.init(gr);
      treeDisplay.init(gr);

      this.paneGraphDisplay.removeAll();
      this.paneGraphDisplay.add(graphDisplay.graphcom);
      this.graphView = graphDisplay.graphView;
      this.currentStep = 0;

      this.paneTreeDisplay.removeAll();
      this.paneTreeDisplay.add(treeDisplay.graphcom);
      this.treeView = treeDisplay.graphView;



      //graphDisplay.graphView.addGraphSelectionListener(this);
      //treeDisplay.graphView.addGraphSelectionListener(this);

      if (rdbDFS.isSelected()) {
        this.STATE_SEARCH = this.STATE_SEARCH_DFS;
        graphAlgo.dfs();
      } else {
        this.STATE_SEARCH = this.STATE_SEARCH_BFS;
        graphAlgo.bfs();
      }

      //this.getContentPane().add(pertDisplay);
      this.setTitle("Elementary Graph Simulation");
      this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      this.setPreferredSize(new Dimension(500, 500));
      //this.pack();
      this.setVisible(true);
    } catch (Exception e) {
    }
  }

  private void normaliseGraph(Vector<Vector<Node>> graph) {
    for (int i = 0; i < graph.size(); i++) {
      for (int j = 0; j < graph.get(i).size(); j++) {
        Node a = graph.get(i).get(j);
        for (int k = 0; k < graph.size(); k++) {
          for (int l = 0; l < graph.get(k).size(); l++) {
            if (graph.get(k).get(l).compareTo(a) == 0) {
              graph.get(k).set(l, a);
            }
          }
        }
      }
    }
  }
//  /**
//   * set valueChanged implement GraphSelectionListener
//   *
//   * @param e
//   */
//  public void valueChanged(GraphSelectionEvent e) {
//    mxCell cell = (mxCell) e.getCell();
//    Node node = (Node) cell.getUserObject();
//    if (node != null) {
//      //setTableProperty(node);
//    }
//  }
  private mxGraphView graphView;
  private mxGraphView treeView;
//    private OrdonnancementAlg oral;
  private GraphDisplayMx graphDisplay;
  private TreeDisplayMx treeDisplay;
  private int currentStep;
  private String currentModel;

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    java.awt.EventQueue.invokeLater(new Runnable() {

      public void run() {
        new MainMx().setVisible(true);
      }
    });
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.ButtonGroup buttonGroup1;
  private javax.swing.JMenu cmdNext;
  private javax.swing.JMenu cmdOpen;
  private javax.swing.JMenu cmdReload;
  private javax.swing.JMenuBar jMenuBar1;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JSplitPane jSplitPane1;
  private javax.swing.JSplitPane jSplitPane2;
  private javax.swing.JSplitPane jSplitPane3;
  private javax.swing.JPanel paneGraphDisplay;
  private javax.swing.JPanel paneTreeDisplay;
  private javax.swing.JRadioButton rdbBFS;
  private javax.swing.JRadioButton rdbDFS;
  private javax.swing.JTextArea txtLog;
  // End of variables declaration//GEN-END:variables
}

