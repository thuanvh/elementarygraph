package ordonnancement;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author thuan
 */

import org.jgraph.JGraph;
import org.jgraph.graph.AttributeMap;
import org.jgraph.graph.DefaultEdge;
import org.jgraph.graph.DefaultGraphCell;
import org.jgraph.graph.GraphConstants;
import org.jgrapht.DirectedGraph;
import org.jgrapht.ListenableGraph;
import org.jgrapht.ext.JGraphModelAdapter;
import org.jgrapht.graph.DefaultEdge;
import org.jgrapht.graph.DefaultListenableGraph;
import org.jgrapht.graph.DirectedMultigraph;

import javax.swing.*;
import java.awt.*;
import java.awt.geom.Rectangle2D;
import java.util.Vector;

public class GraphDisplayJGraphT extends JApplet {

    //~ Static fields/initializers ---------------------------------------------

    private static final long serialVersionUID = 3256444702936019250L;
    private static final Color DEFAULT_BG_COLOR = Color.decode("#FAFBFF");
    private static final Dimension DEFAULT_SIZE = new Dimension(530, 320);
    private static final int nodePaddingLeft=100;
    private static final int nodePaddingTop=70;

    //~ Instance fields --------------------------------------------------------
    public Vector<Node> nodeList;
    public Vector<Vector<Node>> graph;

    //
    private JGraphModelAdapter jgAdapter;

    //~ Methods ----------------------------------------------------------------

    /**
     * An alternative starting point for this demo, to also allow running this
     * applet as an application.
     *
     * @param args ignored.
     */

    /**
     * {@inheritDoc}
     */
    public void init(Vector<Vector<Node>> graph) {
        // create a JGraphT graph
        ListenableGraph<String, DefaultEdge> g =
                new ListenableDirectedMultigraph<String, DefaultEdge>(
                        DefaultEdge.class);

        // create a visualization using JGraph, via an adapter
        jgAdapter = new JGraphModelAdapter<String, DefaultEdge>(g);

        JGraph jgraph = new JGraph(jgAdapter);
        adjustDisplaySettings(jgraph);
        getContentPane().add(jgraph);
        resize(DEFAULT_SIZE);

        this.graph = graph;
        this.nodeList = new Vector<Node>();
        int i = 0, j = 0;
        for (i = 0; i < graph.size(); i++) {
            for (j = 0; j < graph.get(i).size(); j++) {
                if (!nodeList.contains(graph.get(i).get(j)))
                {
                    nodeList.add(graph.get(i).get(j));
                    System.out.print(nodeList.get(i).getTaskName());
                }

            }
        }
        displayGraph(g);

    }

    private void displayGraph(ListenableGraph<String, DefaultEdge> g) {

        int i = 0;
        int j = 0;
        for (i = 0; i < nodeList.size(); i++) {
            g.addVertex(nodeList.get(i).getTaskName());
            System.out.print(nodeList.get(i).getTaskName());
        }
        for (i = 0; i < graph.size(); i++) {
            for (j = 1; j < graph.get(i).size(); j++) {
                g.addEdge(graph.get(i).get(0).getTaskName(), graph.get(i).get(j).getTaskName());
            }
        }

        // calculate level of each node
        int[] nodeListLevel = new int[nodeList.size()];
        for (i = 0; i < graph.size(); i++) {
            int srcNodePosition = nodeList.indexOf(graph.get(i).get(0));

            for (j = 1; j < graph.get(i).size(); j++) {
                int destNodePosition = nodeList.indexOf(graph.get(i).get(j));
                if (nodeListLevel[srcNodePosition] >= nodeListLevel[destNodePosition]) {
                    nodeListLevel[destNodePosition] = nodeListLevel[srcNodePosition] + 1;
                }

            }
        }
        int maxLevel = 0;
        for (i = 0; i < nodeListLevel.length; i++) {
            if (maxLevel < nodeListLevel[i]) {
                maxLevel = nodeListLevel[i];
            }
        }

        // Estimate position de vertex
        int[] nodeListHeightLevel = new int[maxLevel+1];
        java.util.Random rand=new java.util.Random();
        for (i = 0; i < nodeList.size(); i++) {
            int x = nodeListLevel[i] * nodePaddingLeft + rand.nextInt((int)(nodePaddingLeft/1.5));
            nodeListHeightLevel[nodeListLevel[i]]++;
            int y = nodeListHeightLevel[nodeListLevel[i]] * nodePaddingTop + rand.nextInt((int)(nodePaddingTop/1.5));
            positionVertexAt(nodeList.get(i).getTaskName(), x, y);
        }
        // position vertices nicely within JGraph component
        /*positionVertexAt(v1, 130, 40);
        positionVertexAt(v2, 60, 200);
        positionVertexAt(v3, 310, 230);
        positionVertexAt(v4, 380, 70);
*/
        // that's all there is to it!...
    }

    public static void main(String[] args) {
        GraphDisplayJGraphT applet = new GraphDisplayJGraphT();
        Node node1 = new Node("a", 1);
        Node node2 = new Node("b", 2);
        Node node3 = new Node("c", 3);
        Node node4 = new Node("d", 4);
        Vector<Vector<Node>> graph = new Vector<Vector<Node>>();

        Vector<Node> link1 = new Vector<Node>();
        link1.add(node1);
        link1.add(node2);
        graph.add(link1);

        Vector<Node> link2 = new Vector<Node>();
        link2.add(node2);
        link2.add(node3);
        link2.add(node4);
        graph.add(link2);

        Vector<Node> link3 = new Vector<Node>();
        link3.add(node4);
        link3.add(node3);
        graph.add(link3);


        applet.init(graph);

        JFrame frame = new JFrame();
        frame.getContentPane().add(applet);
        frame.setTitle("JGraphT Adapter to JGraph Demo");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    private void adjustDisplaySettings(JGraph jg) {
        jg.setPreferredSize(DEFAULT_SIZE);

        Color c = DEFAULT_BG_COLOR;
        String colorStr = null;

        try {
            colorStr = getParameter("bgcolor");
        } catch (Exception e) {
        }

        if (colorStr != null) {
            c = Color.decode(colorStr);
        }

        jg.setBackground(c);
    }

    @SuppressWarnings("unchecked")
    // FIXME hb 28-nov-05: See FIXME below
    private void positionVertexAt(Object vertex, int x, int y) {
        DefaultGraphCell cell = jgAdapter.getVertexCell(vertex);
        AttributeMap attr = cell.getAttributes();
        Rectangle2D bounds = GraphConstants.getBounds(attr);

        Rectangle2D newBounds =
                new Rectangle2D.Double(
                        x,
                        y,20,20);
//                        bounds.getWidth(),
//                        bounds.getHeight());

        GraphConstants.setBounds(attr, newBounds);

        // TODO: Clean up generics once JGraph goes generic
        AttributeMap cellAttr = new AttributeMap();
        cellAttr.put(cell, attr);
        jgAdapter.edit(cellAttr, null, null, null);
    }

    //~ Inner Classes ----------------------------------------------------------

    /**
     * a listenable directed multigraph that allows loops and parallel edges.
     */
    private static class ListenableDirectedMultigraph<V, E>
            extends DefaultListenableGraph<V, E>
            implements DirectedGraph<V, E> {
        private static final long serialVersionUID = 1L;

        ListenableDirectedMultigraph(Class<E> edgeClass) {
            super(new DirectedMultigraph<V, E>(edgeClass));
        }
    }
    /*
     * Display graph from list of adjacences
     */

    public void displayGraph() {

    }

    /*
     * Change coleur de criticPath
     */

    public void displayCriticPath(ListenableGraph<String, DefaultEdge> g) {
        Vector<Vector<Node>> path=generateCriticPath();
        int i=0; int j=0;
        for(i=0; i<graph.size(); i++){
            for(j=1; j<graph.get(i).size(); j++){
                DefaultEdge e=g.getEdge(graph.get(i).get(0).getTaskName(), graph.get(i).get(j).getTaskName());

            }
        }
    }

    public Vector<Vector<Node>> generateCriticPath(){
        Vector<Vector<Node>> path=new Vector<Vector<Node>>();
        int i=0;
        int j=0;
        // calculate level of each node
        int[] nodeListLevel = new int[nodeList.size()];
        for (i = 0; i < graph.size(); i++) {
            if(graph.get(i).get(0).getSlack()!=0)
                continue;
            Vector<Node> link=new Vector<Node>();
            link.add(graph.get(i).get(0));
            for (j = 1; j < graph.get(i).size(); j++) {
                if(graph.get(i).get(j).getSlack()==0){
                     link.add(graph.get(i).get(j));
                }
            }
            if(link.size()>1)
                path.add(link);
        }
        return path;
    }
}