package elementarygraph.gui;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
import elementarygraph.algorithme.*;
import org.jgraph.JGraph;
import org.jgraph.event.GraphSelectionEvent;
import org.jgraph.event.GraphSelectionListener;
import org.jgraph.graph.DefaultGraphCell;

import java.awt.*;
import java.io.File;
import javax.swing.*;
import java.util.Vector;
/*
 * Main.java
 *
 * Created on 23 d√©c. 2009, 15:47:03
 */

/**
 * @author thuan
 */
public class Main extends javax.swing.JFrame implements GraphSelectionListener {

  /**
   * Creates new form Main
   */
  public Main() {
    initComponents();
    initTableProperty();
  }

  /**
   * This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    buttonGroup1 = new javax.swing.ButtonGroup();
    jPanel1 = new javax.swing.JPanel();
    jSplitPane1 = new javax.swing.JSplitPane();
    jSplitPane2 = new javax.swing.JSplitPane();
    jScrollPane2 = new javax.swing.JScrollPane();
    txtLog = new javax.swing.JTextArea();
    jPanel2 = new javax.swing.JPanel();
    rdbDFS = new javax.swing.JRadioButton();
    rdbBFS = new javax.swing.JRadioButton();
    jSplitPane3 = new javax.swing.JSplitPane();
    paneGraphDisplay = new javax.swing.JPanel();
    paneTreeDisplay = new javax.swing.JPanel();
    jMenuBar1 = new javax.swing.JMenuBar();
    cmdOpen = new javax.swing.JMenu();
    cmdReload = new javax.swing.JMenu();
    cmdNext = new javax.swing.JMenu();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    jPanel1.setLayout(new java.awt.BorderLayout());

    jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

    jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

    txtLog.setColumns(20);
    txtLog.setRows(20);
    txtLog.setText("PERT Simulation");
    jScrollPane2.setViewportView(txtLog);

    jSplitPane2.setTopComponent(jScrollPane2);

    buttonGroup1.add(rdbDFS);
    rdbDFS.setLabel("DFS");
    jPanel2.add(rdbDFS);
    rdbDFS.getAccessibleContext().setAccessibleName("rdbDFS");

    buttonGroup1.add(rdbBFS);
    rdbBFS.setLabel("BFS");
    jPanel2.add(rdbBFS);
    rdbBFS.getAccessibleContext().setAccessibleName("rdbBFS");

    jSplitPane2.setRightComponent(jPanel2);

    jSplitPane1.setLeftComponent(jSplitPane2);

    paneGraphDisplay.setPreferredSize(new java.awt.Dimension(500, 474));
    paneGraphDisplay.setLayout(new javax.swing.BoxLayout(paneGraphDisplay, javax.swing.BoxLayout.LINE_AXIS));
    jSplitPane3.setLeftComponent(paneGraphDisplay);
    jSplitPane3.setRightComponent(paneTreeDisplay);

    jSplitPane1.setBottomComponent(jSplitPane3);

    jPanel1.add(jSplitPane1, java.awt.BorderLayout.CENTER);

    getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

    cmdOpen.setText("Open");
    cmdOpen.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mousePressed(java.awt.event.MouseEvent evt) {
        cmdOpenMousePressed(evt);
      }
    });
    jMenuBar1.add(cmdOpen);

    cmdReload.setText("Reload");
    cmdReload.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mousePressed(java.awt.event.MouseEvent evt) {
        cmdReloadMousePressed(evt);
      }
    });
    jMenuBar1.add(cmdReload);

    cmdNext.setText("Next");
    cmdNext.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mousePressed(java.awt.event.MouseEvent evt) {
        cmdNextMousePressed(evt);
      }
    });
    jMenuBar1.add(cmdNext);
    cmdNext.getAccessibleContext().setAccessibleName("cmdNext");

    setJMenuBar(jMenuBar1);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void displayLog(Node currentNode, FindingProcessState state, Vector<Node> relativeNode) {
//        switch (state) {
//            case EARLY_FINDING:
//                txtLog.append("\nTask " + currentNode.getTaskName() + " : ");
//                txtLog.append("EarlyStart = " + currentNode.getEarlyStart() + "\n");
//                for(int i=0; i<relativeNode.size(); i++){
//                    txtLog.append("["+relativeNode.get(i).getTaskName()+",EarlyStart:"+relativeNode.get(i).getEarlyStart()+
//                            ",Duration:"+relativeNode.get(i).getDuration()+",EarlyFinish:"+relativeNode.get(i).getEarlyFinish()+"]\n");
//                    //txtLog.append(",");
//                }
//                break;
//            case LATELY_FINDING:
//                txtLog.append("\nTask " + currentNode.getTaskName() + " : ");
//                txtLog.append("LateStart = " + currentNode.getLateStart() + " , Duration = "+ currentNode.getDuration() + "\n");
//                for(int i=0; i<relativeNode.size(); i++){
//                    txtLog.append("["+relativeNode.get(i).getTaskName()+",LateStart:"+relativeNode.get(i).getLateStart()+ "]\n");
//                    //txtLog.append(",");
//                }
//                break;
//            case END_FINDING:
//                txtLog.append("Finish" + "\n");
//                break;
//        }
  }

    private void cmdNextMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdNextMousePressed
//        if (findingProcessState == FindingProcessState.EARLY_FINDING) {
//            if (currentStep == 0){
//                txtLog.append("\n========Start========\n");
//            }
//            if (currentStep < oral.listNodeFirst.size()) {
//                Node currentNode = (Node) oral.listNodeFirst.get(currentStep);
//                if (currentNode != null) {
//                    pertDisplay.focusNode(currentNode, findingProcessState);
//                    Vector<Node> relativeInNodes=pertDisplay.getAdjacenceNodes(currentNode,true);
//                    displayLog(currentNode, findingProcessState,relativeInNodes);
//                }
//
//                currentStep++;
//            } else {
//                currentStep = 0;
//                findingProcessState = FindingProcessState.LATELY_FINDING;
//                txtLog.append("\n==Finish finding EarlyStart. Start finding LateStart.==\n");
//            }
//        }
//        if (findingProcessState == FindingProcessState.LATELY_FINDING) {
//            if (currentStep < oral.listNodeSecond.size()) {
//                Node currentNode = (Node) oral.listNodeSecond.get(currentStep);
//                if (currentNode != null) {
//                    pertDisplay.focusNode(currentNode, findingProcessState);
//                    Vector<Node> relativeOutNodes=pertDisplay.getAdjacenceNodes(currentNode,false);
//                    displayLog(currentNode, findingProcessState,relativeOutNodes);
//                }
//                currentStep++;
//            }
//            if (currentStep == oral.listNodeSecond.size()) {
//                currentStep = 0;
//                findingProcessState = FindingProcessState.END_FINDING;
//                Vector<Node> path = pertDisplay.displayCriticPath();
//                String strPath = "";
//                for (int i = 0; i < path.size(); i++) {
//                    strPath += path.get(i).getTitle();
//                    if (i < path.size() - 1) {
//                        strPath += ",";
//                    }
//                }
//
//                txtLog.append("\nCritic Path: " + strPath + "\n");
//                txtLog.append("========FIN========\n");
//
//            }
//        }
    }//GEN-LAST:event_cmdNextMousePressed

    private void cmdReloadMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdReloadMousePressed
      loadModel(new File(this.currentModel));
    }//GEN-LAST:event_cmdReloadMousePressed

    private void cmdOpenMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmdOpenMousePressed
      // TODO add your handling code here:
      JFileChooser fileChooser = new JFileChooser();
      fileChooser.setCurrentDirectory(new File("."));
      fileChooser.setVisible(true);
      File file;
      if (fileChooser.showOpenDialog(this) == javax.swing.JFileChooser.APPROVE_OPTION) {
        file = fileChooser.getSelectedFile();
        // Call to function xu ly
        this.currentModel = file.getAbsolutePath();
        loadModel(file);
      }
    }//GEN-LAST:event_cmdOpenMousePressed

  private Vector<Vector<Node>> loadGraph(File file) {
    Node node1 = new Node("a", 1);
    Node node2 = new Node("b", 2);
    Node node3 = new Node("c", 3);
    Node node4 = new Node("d", 4);
//        node3.setSlack(5);
    Vector<Vector<Node>> graph = new Vector<Vector<Node>>();

    Vector<Node> link1 = new Vector<Node>();
    link1.add(node1);
    link1.add(node2);
    graph.add(link1);

    Vector<Node> link2 = new Vector<Node>();
    link2.add(node2);
    link2.add(node3);
    link2.add(node4);
    graph.add(link2);

    Vector<Node> link3 = new Vector<Node>();
    link3.add(node4);
    link3.add(node3);
    graph.add(link3);

    return graph;
  }

  /**
   * load Model from file
   *
   * @param file
   */
  private void loadModel(File file) {
    // load model to pert engine
//        oral = new OrdonnancementAlg(file.getAbsolutePath());
    Graph _gr = new Graph();
    Vector<Vector<Node>> gr = _gr.data;//oral.matrixNode;
    // display model
    pertDisplay = new GraphDisplay();
    normaliseGraph(_gr.data);
    pertDisplay.init(gr);

    this.paneGraphDisplay.removeAll();
    this.paneGraphDisplay.add(new JScrollPane(pertDisplay.graphView));
    this.graphView = pertDisplay.graphView;
    this.currentStep = 0;

    this.findingProcessState = FindingProcessState.EARLY_FINDING;

    pertDisplay.graphView.addGraphSelectionListener(this);
    //this.getContentPane().add(pertDisplay);
    this.setTitle("Ordonnancement PERT Simulation");
    this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    this.setPreferredSize(new Dimension(500, 500));
    //this.pack();
    this.setVisible(true);

  }

  private void normaliseGraph(Vector<Vector<Node>> graph){
    for(int i=0 ; i<graph.size(); i++){
      for(int j=0; j<graph.get(i).size(); j++){
        Node a=graph.get(i).get(j);
        for(int k=0; k<graph.size(); k++){
          for(int l=0; l<graph.get(k).size(); l++){
            if(graph.get(k).get(l).compareTo(a)==0)
              graph.get(k).set(l, a);
          }
        }
      }
    }
  }
  /**
   * init table property
   */
  private void initTableProperty() {
//        tblProperty.setValueAt("TaskName", 0, 0);
//        tblProperty.setValueAt("Duration", 1, 0);
//        tblProperty.setValueAt("EarlyFinish", 2, 0);
//        tblProperty.setValueAt("EarlyStart", 3, 0);
//        tblProperty.setValueAt("LateFinish", 4, 0);
//        tblProperty.setValueAt("LateStart", 5, 0);
//        tblProperty.setValueAt("Slack", 6, 0);
//        tblProperty.setValueAt("Title", 7, 0);
  }

  /**
   * set table property from node
   *
   * @param node
   */
  private void setTableProperty(Node node) {
//        switch (node.getFindingState()) {
//            case START_FINDING:
//                tblProperty.setValueAt(node.getTaskName(), 0, 1);
//                tblProperty.setValueAt(node.getDuration(), 1, 1);
//                tblProperty.setValueAt("-", 2, 1);
//                tblProperty.setValueAt("-", 3, 1);
//                tblProperty.setValueAt("-", 4, 1);
//                tblProperty.setValueAt("-", 5, 1);
//                tblProperty.setValueAt("-", 6, 1);
//                tblProperty.setValueAt(node.getTitle(), 7, 1);
//                break;
//            case LATELY_FINDING:
//                tblProperty.setValueAt(node.getTaskName(), 0, 1);
//                tblProperty.setValueAt(node.getDuration(), 1, 1);
//                tblProperty.setValueAt(node.getEarlyFinish(), 2, 1);
//                tblProperty.setValueAt(node.getEarlyStart(), 3, 1);
//                tblProperty.setValueAt(node.getLateFinish(), 4, 1);
//                tblProperty.setValueAt(node.getLateStart(), 5, 1);
//                tblProperty.setValueAt(node.getSlack(), 6, 1);
//                tblProperty.setValueAt(node.getTitle(), 7, 1);
//                break;
//            case EARLY_FINDING:
//                tblProperty.setValueAt(node.getTaskName(), 0, 1);
//                tblProperty.setValueAt(node.getDuration(), 1, 1);
//                tblProperty.setValueAt(node.getEarlyFinish(), 2, 1);
//                tblProperty.setValueAt(node.getEarlyStart(), 3, 1);
//                tblProperty.setValueAt("-", 4, 1);
//                tblProperty.setValueAt("-", 5, 1);
//                tblProperty.setValueAt("-", 6, 1);
//                tblProperty.setValueAt(node.getTitle(), 7, 1);
//                break;
//            case END_FINDING:
//                break;
//        }
  }

  /**
   * set valueChanged implement GraphSelectionListener
   *
   * @param e
   */
  public void valueChanged(GraphSelectionEvent e) {
    DefaultGraphCell cell = (DefaultGraphCell) e.getCell();
    Node node = (Node) cell.getUserObject();
    if (node != null) {
      setTableProperty(node);
    }
  }
  private JGraph graphView;
//    private OrdonnancementAlg oral;
  private GraphDisplay pertDisplay;
  private int currentStep;
  private FindingProcessState findingProcessState;
  private String currentModel;

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    java.awt.EventQueue.invokeLater(new Runnable() {

      public void run() {
        new Main().setVisible(true);
      }
    });
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.ButtonGroup buttonGroup1;
  private javax.swing.JMenu cmdNext;
  private javax.swing.JMenu cmdOpen;
  private javax.swing.JMenu cmdReload;
  private javax.swing.JMenuBar jMenuBar1;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JSplitPane jSplitPane1;
  private javax.swing.JSplitPane jSplitPane2;
  private javax.swing.JSplitPane jSplitPane3;
  private javax.swing.JPanel paneGraphDisplay;
  private javax.swing.JPanel paneTreeDisplay;
  private javax.swing.JRadioButton rdbBFS;
  private javax.swing.JRadioButton rdbDFS;
  private javax.swing.JTextArea txtLog;
  // End of variables declaration//GEN-END:variables
}

